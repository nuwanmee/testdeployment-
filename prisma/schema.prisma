generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// First define all models that are referenced by other models
model Profile {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])
  status        String   @default("pending") // "pending", "approved", "refused"
  // Basic Information
  sex           String?  @db.VarChar(10)
  birthday      DateTime?
  district      String?
  
  
  // Personal Details
  familyDetails String?
  hobbies       String?
  expectations  String?
  education     String?
  occupation    String?
  religion      String?
  caste         String?
  height        Float?
  maritalStatus String?
  motherTongue  String?
  annualIncome  String?
  aboutMe       String?
  
  // Relations
  photos        Photo[]
  savedBy       SavedProfile[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  approvedAt  DateTime?
  rejectedAt  DateTime?
  approvedBy  String?
  rejectedBy      String?
  rejectionReason String?

  @@index([sex])
  @@index([district])
}

model Proposal {
  id         Int      @id @default(autoincrement())
  status     String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  message    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sender     User     @relation("SentProposals", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedProposals", fields: [receiverId], references: [id])
  receiverId Int

  @@index([senderId])
  @@index([receiverId])
  @@index([status])
}

model Message {
  id          Int       @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String    @db.Text
  isRead      Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  
  sender      User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  type        String    // e.g., PROPOSAL, MESSAGE, SYSTEM
  content     String    @db.Text
  isRead      Boolean   @default(false)
  link        String?   // Optional link to redirect when clicked
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Subscription {
  id                Int       @id @default(autoincrement())
  userId            Int
  planId            Int
  startDate         DateTime  @default(now())
  endDate           DateTime
  status            SubscriptionStatus @default(ACTIVE)
  isAutoRenew       Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              Plan      @relation(fields: [planId], references: [id])
  payments          Payment[]
  
  @@index([userId])
  @@index([planId])
}

model Preference {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Age Preferences
  ageMin            Int       @default(18)
  ageMax            Int       @default(50)
  ageWeight         Int       @default(50)
  ageEnabled        Boolean   @default(true)
  
  // Height Preferences
  heightMin         Float     @default(150)
  heightMax         Float     @default(190)
  heightWeight      Int       @default(50)
  heightEnabled     Boolean   @default(true)
  
  // Location Preferences
  locations         String?   @db.Text
  locationsWeight   Int       @default(50)
  locationsEnabled  Boolean   @default(true)
  
  // Religion Preferences
  religion          String?
  religionWeight    Int       @default(50)
  religionEnabled   Boolean   @default(false)
  
  // Caste Preferences
  caste             String?
  casteWeight       Int       @default(50)
  casteEnabled      Boolean   @default(false)
  
  // Education Preferences
  education         String?
  educationWeight   Int       @default(50)
  educationEnabled  Boolean   @default(false)
}

model SavedProfile {
  id        Int     @id @default(autoincrement())
  userId    Int
  profileId Int
  user      User    @relation(fields: [userId], references: [id])
  profile   Profile @relation(fields: [profileId], references: [id])
  
  @@unique([userId, profileId], name: "userId_profileId")
}

// Then define the User model that references them
model User {
  id              Int        @id @default(autoincrement())
  name            String?
  email           String     @unique
  emailVerified   DateTime?
  password        String?
  status        String   @default("active") // "active" or "inactive"

  role            String     @default("CLIENT")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Profile fields
  firstName       String?
  lastName        String?
  gender          String?
  dateOfBirth     DateTime?
  profilePicture  String?
  bio             String?    @db.Text
  location        String?
  occupation      String?
  education       String?
  religion        String?
  caste           String?
  height          Float?
  maritalStatus   String?
  phoneNumber     String?
  isProfileComplete Boolean   @default(false)
  isVerified      Boolean    @default(false)
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  profile         Profile?
  sentProposals   Proposal[] @relation("SentProposals")
  receivedProposals Proposal[] @relation("ReceivedProposals")
  sentMessages    Message[]  @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
  notifications   Notification[]
  subscriptions   Subscription[]
  preferences     Preference?
  SavedProfiles   SavedProfile[]

   // Add these TOTP fields
  totpSecret          String?
  totpEnabled         Boolean   @default(false)
  backupCodes         BackupCode[]
  
  @@map("users")
}

model BackupCode {
  id        Int      @id @default(autoincrement())
  code      String
  used      Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, code])
}

// Then define the remaining models
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Photo {
  id          Int     @id @default(autoincrement())
  profileId   Int
  profile     Profile @relation(fields: [profileId], references: [id])
  url         String
  isMain      Boolean @default(false)
  // Make sure this matches what you're trying to use
  isApproved  Boolean @default(false) // Add this if missing
  originalName String
  fileSize    Int
  mimeType    String
  createdAt   DateTime @default(now())
}

model Plan {
  id          Int       @id @default(autoincrement())
  name        String
  description String?   @db.Text
  price       Float
  duration    Int       // Duration in days
  features    String?   @db.Text
  isPopular   Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  subscriptions Subscription[]
}

model Payment {
  id              Int       @id @default(autoincrement())
  subscriptionId  Int
  amount          Float
  currency        String    @default("USD")
  paymentMethod   String    // e.g., CREDIT_CARD, PAYPAL, etc.
  transactionId   String?
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime  @default(now())
  
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([subscriptionId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}